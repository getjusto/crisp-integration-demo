/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/getAvailability": {
    /**
     * Obtener disponibilidad
     * @description Se llamará constantemente este método para obtener la disponibilidad del canal de ventas y mostrarlo en la barra de estado de Crisp.
     */
    get: operations["getAvailability"];
  };
  "/acceptOrder": {
    /**
     * Aceptar pedido
     * @description Se llamará este método cuando se acepte el pedido desde Crisp. Si es que no se define este método, se tiene que injectar los pedidos con `integrationIsPending: false`
     */
    put: operations["acceptOrder"];
  };
  "/rejectOrder": {
    /**
     * Rechazar pedido
     * @description Se llamará este método cuando se rechace el pedido desde Crisp.
     */
    put: operations["rejectOrder"];
  };
  "/orderReady": {
    /**
     * Marcar pedido preparado
     * @description Se llamará este método cuando se marque el pedido como preparado desde Crisp.
     */
    put: operations["orderReady"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CustomSalesChannelConfig: Record<string, never>;
    GetAvailabilityParams: {
      params?: Record<string, never>;
    };
    AcceptOrderParams: {
      params?: {
        /** @description El id del pedido en el sistema externo. */
        integrationOrderId?: string;
      };
    };
    RejectOrderParams: {
      params?: {
        /** @description El id del pedido en el sistema externo. */
        integrationOrderId?: string;
      };
    };
    OrderReadyParams: {
      params?: {
        /** @description El id del pedido en el sistema externo. */
        integrationOrderId?: string;
      };
    };
    GetAvailabilityResponse: {
      /**
       * @description El estado del canal de ventas.
       * @enum {string}
       */
      status?: "open" | "suspended" | "closed" | "unknown" | "error";
      /**
       * Format: date-time
       * @description Si es que el canal de ventas está suspendido, la fecha hasta la cual está suspendido.
       */
      suspendedUntil?: string;
      /**
       * Format: date-time
       * @description Si es que el canal de ventas está cerrado, la fecha hasta la cual está cerrado.
       */
      closedUntil?: string;
    };
    AcceptOrderResponse: {
      /**
       * @description Si es que el pedido fue aceptado correctamente.
       * @enum {string}
       */
      status?: "success" | "error";
      /** @description Solo si es que el pedido no fue aceptado correctamente, el mensaje de error. */
      message?: string;
    };
    RejectOrderResponse: {
      /**
       * @description Si es que el pedido fue rechazado correctamente.
       * @enum {string}
       */
      status?: "success" | "error";
      /** @description Solo si es que el pedido no fue rechazado correctamente, el mensaje de error. */
      message?: string;
    };
    OrderReadyResponse: {
      /**
       * @description Si es que el pedido fue marcado como listo correctamente.
       * @enum {string}
       */
      status?: "success" | "error";
      /** @description Solo si es que el pedido no fue marcado como listo correctamente, el mensaje de error. */
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Obtener disponibilidad
   * @description Se llamará constantemente este método para obtener la disponibilidad del canal de ventas y mostrarlo en la barra de estado de Crisp.
   */
  getAvailability: {
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetAvailabilityResponse"];
        };
      };
    };
  };
  /**
   * Aceptar pedido
   * @description Se llamará este método cuando se acepte el pedido desde Crisp. Si es que no se define este método, se tiene que injectar los pedidos con `integrationIsPending: false`
   */
  acceptOrder: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptOrderParams"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
          "application/json": components["schemas"]["AcceptOrderResponse"];
        };
      };
    };
  };
  /**
   * Rechazar pedido
   * @description Se llamará este método cuando se rechace el pedido desde Crisp.
   */
  rejectOrder: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RejectOrderParams"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
          "application/json": components["schemas"]["RejectOrderResponse"];
        };
      };
    };
  };
  /**
   * Marcar pedido preparado
   * @description Se llamará este método cuando se marque el pedido como preparado desde Crisp.
   */
  orderReady: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderReadyParams"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
          "application/json": components["schemas"]["OrderReadyResponse"];
        };
      };
    };
  };
}
