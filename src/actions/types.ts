/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/{salesChannelConfigId}/inject-order": {
    /**
     * Crear pedido
     * @description Usa este método para inyectar un nuevo pedido a Crisp.
     */
    post: {
      parameters: {
        header: {
          /** @description Token de autenticación. */
          Authorization: string;
        };
        path: {
          /** @description El ID de la configuración de canal de ventas. */
          salesChannelConfigId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["InjectOrderParams"];
        };
      };
      responses: {
        /** @description Order injected successfully */
        200: {
          content: {
            "application/json": components["schemas"]["InjectOrderResult"];
          };
        };
      };
    };
  };
  "/{salesChannelConfigId}/cancel-order": {
    /**
     * Cancelar pedido
     * @description Usa este método para cancelar un pedido en Crisp.
     */
    put: {
      parameters: {
        header: {
          /** @description Token de autenticación. */
          Authorization: string;
        };
        path: {
          /** @description El ID de la configuración de canal de ventas. */
          salesChannelConfigId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CancelOrderParams"];
        };
      };
      responses: {
        /** @description Order cancelled successfully */
        200: {
          content: {
            "application/json": components["schemas"]["CancelOrderResult"];
          };
        };
      };
    };
  };
  "/{salesChannelConfigId}/complete-order": {
    /**
     * Completar un pedido
     * @description Usa este método para completar un pedido en Crisp.
     */
    put: {
      parameters: {
        header: {
          /** @description Token de autenticación. */
          Authorization: string;
        };
        path: {
          /** @description El ID de la configuración de canal de ventas. */
          salesChannelConfigId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CompleteOrderParams"];
        };
      };
      responses: {
        /** @description Order completed successfully */
        200: {
          content: {
            "application/json": components["schemas"]["CompleteOrderResult"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CustomIntegrationOrder: {
      /** @description El id de la cuenta de Crisp */
      tabId?: string;
      /** @description El id del pedido en el sistema externo */
      integrationOrderId?: string;
    };
    InjectOrderParamsProductModifier: {
      /** @description La cantidad de este modificador. */
      modifierQuantity?: number;
      /** @description El ID en el menú de Justo del grupo de modificadores. */
      modifierGroupId?: string | null;
      /** @description El nombre del grupo de modificadores. */
      modifierGroupName?: string | null;
      /** @description El ID en el menú de Justo del modificador. */
      modifierId?: string | null;
      /** @description El precio unitario del modificador. */
      unitPrice?: number | null;
      /** @description El nombre del modificador. */
      modifierName?: string | null;
    };
    InjectOrderParamsProduct: {
      /** @description El ID del producto en el e-commerce de Justo. Sirve para descontar stock o asignar categorías. */
      productId?: string;
      /** @description El precio unitario del producto. */
      unitPrice?: number;
      /** @description El nombre del producto. */
      name?: string | null;
      /** @description La cantidad de productos. */
      amount?: number;
      /** @description Comentarios del clientes sobre el producto. */
      comment?: string | null;
      /** @description Los modificadores del producto. */
      modifiers?: components["schemas"]["InjectOrderParamsProductModifier"][];
    };
    InjectOrderParamsClientData: {
      /** @description Nombre del cliente */
      name?: string | null;
      /**
       * Format: email
       * @description Email
       */
      email?: string | null;
      /** @description Teléfono */
      phone?: string | null;
      /** @description Dirección */
      addressLine1?: string | null;
      /** @description Dpto, piso, etc */
      addressLine2?: string | null;
      /** @description Comuna, ciudad, etc */
      addressExtra?: string | null;
    };
    InjectOrderParams: {
      /** @description El id del pedido en el sistema externo. Se usará para identificar el pedido en las otras llamadas. Cada ID debe ser único. */
      integrationOrderId?: string;
      /** @description El número de pedido que se usará para identificar este pedido. Es un ID corto. */
      displayId?: string;
      /**
       * @description El tipo de entrega. Puede ser 'go' para pedidos de retiro o 'delivery' para pedidos con entrega al cliente.
       * @enum {string}
       */
      deliveryType?: "go" | "delivery";
      /** @description El costo de entrega del pedido. Solo para pedidos de entrega. */
      deliveryFee?: number | null;
      /** @description Comentarios sobre el pedido. Se verán en el panel de Crisp. */
      comments?: string | null;
      /** @description Información del cliente. Se verá en el panel de Crisp. Es opcional. */
      clientData?: components["schemas"]["InjectOrderParamsClientData"];
      /** @description Si es verdadero, el pedido se marcará como pendiente en Crisp y se deberá aceptar. Si usas esta opción debes crear el webhook de aceptación de pedido. */
      integrationIsPending?: boolean;
      /**
       * Format: date-time
       * @description La fecha y hora en la que el pedido debe estar listo para ser recogido o entregado.
       */
      mustBeReadyAt?: string;
      /**
       * Format: date-time
       * @description La fecha y hora en la que el pedido debe ser entregado al cliente final.
       */
      mustBeDeliveredAt?: string;
      /** @description El monto pagado por el cliente. No incluye propina. Si es que no es especifica, se asume que aún no está pagado. */
      paidAmount?: number | null;
      /** @description El monto de propina pagado por el cliente. Si es que no es especifica, se asume que no se dejó propina. */
      paidTipAmount?: number | null;
      /** @description El monto de descuento aplicado al pedido. Si es que no es especifica, se asume que no hay descuento. */
      discountAmount?: number | null;
      /** @description Los productos del pedido. */
      products?: components["schemas"]["InjectOrderParamsProduct"][];
    };
    InjectOrderResult: {
      order?: components["schemas"]["CustomIntegrationOrder"];
    };
    CancelOrderParams: {
      integrationOrderId?: string;
      /** @description El motivo de la cancelación. */
      reason?: string | null;
    };
    CancelOrderResult: {
      order?: components["schemas"]["CustomIntegrationOrder"];
    };
    CompleteOrderParams: {
      integrationOrderId?: string;
    };
    CompleteOrderResult: {
      order?: components["schemas"]["CustomIntegrationOrder"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
